packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
library(swirl)
swirl()
q()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(X:size)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country == "US" | country=="IN")
filter(cran, size > 100500 && r_os=="linux-gnu")
filter(cran, size > 100500 , r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version==!is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb/2^10)
cran3
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes =  mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarise(by_package, mean(size))
?n
?n_distinct
submit()
tbl
tbl(pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit
submit()
submit()
submit()
library(swirl)
swirl()
heat(pollution)
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = 'blue')
abline(h = 12)
hist(ppm, col = 'green')
rug(ppm)
low
high
hist(ppm, col = 'green', breaks = 100)
rug(ppm)
hist(ppm, col = 'green')
abline(v = 12, lwd = 2)
abline(v = median(ppm), col = 'magenta', lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = 'wheat', main = 'Number of Counties in Each Region')
box(pm25 ~ region, data = polution, col = 'red')
box(pm25 ~ region, data = pollution, col = 'red')
boxplot(pm25 ~ region, data = pollution, col = 'red')
par(mfrow=c(2,1), mar=c(4,4,2,1))
east <- subset(pollution, region == 'east')
head(east)
hist(east$pm25, col = 'green')
hist(subset(pollution, region == 'west')$pm25, col = 'green')
with(pollution, plot(pm25, latitude))
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty=2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty=2)
par(mfrow = c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region == 'west')
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file = "myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Incom | region, data = state, layout = c(4,1))
xyplot(Life.Exp~Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp~Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
boxplot(airquality$Month)
table(airquality$Month)
boxplot(Ozone~Month, data = airquality)
0
exit
quit()
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot3.R')
setwd("~/Documents/Programming/CourseraDataScience/004/week1/Project1")
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot3.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot4.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot1.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot1.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot1.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot2.R')
source('~/Documents/Programming/CourseraDataScience/004/week1/Project1/Plot3.R')
